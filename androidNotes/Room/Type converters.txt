 //room can store primitive data types data classes can be stored with the annotation @Embedded

//here Priority was an enum class

class Converter {

    @TypeConverter
    fun fromPriority(priority: Priority): String {
        return priority.name
    }

    @TypeConverter
    fun toPriority(priority: String): Priority {
        return Priority.valueOf(priority)
    }

}


-> we don't need to do anything else (except annotating db with @Typeconverters) android will do everything for us




//for storing the array list the process is little different

class ListNetworkWeatherDescriptionConverter {

    val gson = Gson()
    val type: Type = object : TypeToken<List<NetworkWeatherDescription?>?>() {}.type


    /**
     * Converts a listOf[NetworkWeatherDescription] to a [String]
     */
    @TypeConverter
    fun fromWeatherDtoList(list: List<NetworkWeatherDescription?>?): String {
        return gson.toJson(list, type)
    }

    /**
     * Converts a [String] to a listOf[NetworkWeatherDescription]
     */
    @TypeConverter
    fun toWeatherDfromList(json: String?): List<NetworkWeatherDescription> {
        return gson.fromJson(json, type)
    }
}
