https://guides.codepath.com/android/consuming-apis-with-retrofit

				_DEPENDENCIES_

// Retrofit and relevant converters
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.3'



				_CREATION_

//https://newsapi.org/v2/top-headlines?country=us&apiKey=API_KEY



const val API_KEY = "your api key"
const val BASE_URL = "https://newsapi.org"

interface ApiClient{

@GET("/api/endpoints/random")
suspend fun getRandomImage(): Response<ModelClass>


    /*@GET        -> to fetch the data from internet */
    /*@Mutltipart -> If we need to upload images or files, we need to send by using Multipart forms.
                        We will to mark the endpoint with @Multipart, and label at least one parameter with @Part.*/
    /*@Post       -> this is used to create new resources with the help of api in backend*/
    /*@Put        -> this is used to update/REPLACE the existing ENTITY */
    /*@Patch      -> this is used to update/REPLACE the existing data ITEMS individually.*/
    /*@Delete     -> this is used to delete the data */

    /*@Query -> after question mark data filled in url is set by annotation @Query*/
    /*@Path -> data which we input before question mark in url is set by this annotation */
    /*@Body -> payload for the POST call (serialized from a Java object to a JSON string)*/

    /*@Header -> to add a header to a particular api use this, else you can use interceptor of okhttp3


//when url contain something like /user/posts/2.....then only @Path is used
//if there's a url containing /user/posts/2?page=2
//we need @Query , because it is performing a search query in server side
@GET("posts/{id}")
suspend fun getPosts(@Path("id") userId : Int) : Response<User>


//we can pass the query parameter in url like $API_KEY or in function parameters like `page` as @Query
@GET("/v2/top-healines?apiKey=$API_KEY)
suspend fun getHeadlines(@Query("country") country : String, @Query("page") page : Int ) : Response<Article>


//Post is used to insert something in server
@POST("/users/new")
Call<User> createUser(@Body User user);


//when we want to update an existing data in server 
@PUT("/users/new")
Call<User> createUser(@Body User user);


@GET("/event")
fun getProViewEventTypes(@Header(value = "app-id") app_id : String = "lakljklj")


//when we've to update just one field, which is `code` here @Field annotation is used.
@FormUrlEncoded
@POST("/some/endpoint")
Observable<SomeResponse> someEndpoint(@Field("code") String code);		


//same can be done with put as well
@FormUrlEncoded
@PUT("/some/endpoint")
Observable<SomeResponse> someEndpoint(@Field("code") String code);

}



//***************MULTIPART****************//

@Multipart
@POST("api/protected/biometric/biometricAttendance")
suspend fun processAttendancePic(
    @Part file: MultipartBody.Part
)

NOW,inside the repository call the method
  val requestFile = file.asRequestBody("image/*".toMediaTypeOrNull())
  val body: MultipartBody.Part = MultipartBody.Part.createFormData("photo",file.name,requestFile)
  senseStaffServicesApi.processAttendancePic(
      file = body
  )

here "photo" was the attribute to upload the photo


//***********************************************//





object ApiInstance{

	private val retrofit by lazy{

		Retrofit.Builder()
			.baseUrl(BASE_URL)
			.client(OkHttpClient())
			.addConverterFactory(GsonConverterFactory.create())		//or Moshi.
			.build()
		}

	val apiClient: ApiClient by lazy { 
		retrofit.create(ApiClient::class.java)
		}
	}